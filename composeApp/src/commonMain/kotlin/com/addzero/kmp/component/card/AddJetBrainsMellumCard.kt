package com.addzero.kmp.component.card

import androidx.compose.animation.core.*
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.interaction.collectIsHoveredAsState
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.LocalContentColor
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.scale
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp

/**
 * üé® JetBrains MellumÈ£éÊ†ºÂç°ÁâáÁªÑ‰ª∂
 *
 * ÂèÇËÄÉJetBrainsÂÆòÊñπËÆæËÆ°ÁöÑÁé∞‰ª£ÂåñÊùêË¥®Âç°ÁâáÔºåÂÖ∑ÊúâÔºö
 * - Ê∏ÖÊô∞ÁöÑÊ∏êÂèòËÉåÊôØ
 * - ÂæÆÂ¶ôÁöÑËæπÊ°ÜÊïàÊûú
 * - ÊµÅÁïÖÁöÑÊÇ¨ÊµÆÂä®Áîª
 * - Ëá™Âä®ÈÄÇÈÖçÁöÑÊñáÂ≠óÈ¢úËâ≤
 *
 * @param onClick ÁÇπÂáª‰∫ã‰ª∂ÂõûË∞É
 * @param modifier ‰øÆÈ•∞Á¨¶
 * @param cornerRadius ÂúÜËßíÂ§ßÂ∞è
 * @param elevation Èò¥ÂΩ±È´òÂ∫¶
 * @param padding ÂÜÖËæπË∑ù
 * @param backgroundType ËÉåÊôØÁ±ªÂûã
 * @param animationDuration Âä®ÁîªÊåÅÁª≠Êó∂Èó¥
 * @param content Âç°ÁâáÂÜÖÂÆπÊèíÊßΩ
 */
@Composable
fun AddJetBrainsMellumCard(
    onClick: (() -> Unit)? = null,
    modifier: Modifier = Modifier,
    cornerRadius: Dp = 16.dp,
    elevation: Dp = 4.dp,
    padding: Dp = 20.dp,
    backgroundType: MellumCardType = MellumCardType.Purple,
    animationDuration: Int = 300,
    content: @Composable () -> Unit
) {
    val interactionSource = remember { MutableInteractionSource() }
    val isHovered by interactionSource.collectIsHoveredAsState()

    // ÊÇ¨ÊµÆÂä®Áîª
    val scaleAnimation by animateFloatAsState(
        targetValue = if (isHovered) 1.02f else 1f,
        animationSpec = tween(durationMillis = animationDuration, easing = EaseOutCubic),
        label = "scale_animation"
    )

    val elevationAnimation by animateDpAsState(
        targetValue = if (isHovered) elevation + 4.dp else elevation,
        animationSpec = tween(durationMillis = animationDuration, easing = EaseOutCubic),
        label = "elevation_animation"
    )

    // ËçßÂÖâËâ≤ËæπÊ°ÜÂä®Áîª
    val glowAlpha by animateFloatAsState(
        targetValue = if (isHovered) 0.8f else 0f,
        animationSpec = tween(durationMillis = animationDuration, easing = EaseOutCubic),
        label = "glow_animation"
    )

    // ‰ΩøÁî®SurfaceËÄå‰∏çÊòØBoxÔºåÁ°Æ‰øùÊ≠£Á°ÆÁöÑMaterial DesignË°å‰∏∫
    Surface(
        modifier = modifier
            .scale(scaleAnimation)
            // Ê∑ªÂä†ËçßÂÖâËâ≤Â§ñÂèëÂÖâÊïàÊûú
            .then(
                if (isHovered) {
                    Modifier
                        .background(
                            brush = Brush.radialGradient(
                                colors = listOf(
                                    backgroundType.hoverColor.copy(alpha = glowAlpha * 0.3f),
                                    backgroundType.hoverColor.copy(alpha = glowAlpha * 0.1f),
                                    Color.Transparent
                                ),
                                radius = 200f
                            ),
                            shape = RoundedCornerShape(cornerRadius + 8.dp)
                        )
                        .padding(8.dp)
                } else Modifier
            )
            .then(
                if (onClick != null) {
                    Modifier.clickable(
                        interactionSource = interactionSource,
                        indication = null
                    ) { onClick() }
                } else Modifier
            ),
        shape = RoundedCornerShape(cornerRadius),
        tonalElevation = elevationAnimation,
        shadowElevation = elevationAnimation,
        color = backgroundType.backgroundColor
    ) {
        // Áõ¥Êé•‰ΩøÁî®ColumnÂ∏ÉÂ±ÄÔºåÈÅøÂÖçBoxÂµåÂ•ó
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    brush = backgroundType.backgroundBrush,
                    shape = RoundedCornerShape(cornerRadius)
                )
                // ËçßÂÖâËâ≤ËæπÊ°ÜÊïàÊûú
                .border(
                    width = if (isHovered) 2.dp else 1.dp,
                    brush = if (isHovered) {
                        Brush.linearGradient(
                            colors = listOf(
                                backgroundType.hoverColor.copy(alpha = glowAlpha),
                                backgroundType.hoverColor.copy(alpha = glowAlpha * 0.6f),
                                backgroundType.borderColor.copy(alpha = 0.3f)
                            )
                        )
                    } else {
                        Brush.linearGradient(
                            colors = listOf(
                                backgroundType.borderColor.copy(alpha = 0.2f),
                                backgroundType.borderColor.copy(alpha = 0.1f)
                            )
                        )
                    },
                    shape = RoundedCornerShape(cornerRadius)
                )
                .padding(padding)
        ) {
            // Êèê‰æõLocalContentColorÔºåÁ°Æ‰øùÊñáÂ≠óÈ¢úËâ≤Ê≠£Á°Æ
            CompositionLocalProvider(
                LocalContentColor provides backgroundType.contentColor
            ) {
                content()
            }
        }
    }
}

/**
 * üé® MellumÂç°ÁâáÁ±ªÂûãÊûö‰∏æ
 * 
 * ÂÆö‰πâ‰∏çÂêåÁöÑËÉåÊôØÊ∏êÂèòÊ†∑ÂºèÔºåÂèÇËÄÉJetBrains‰∫ßÂìÅÁöÑÈÖçËâ≤ÊñπÊ°à
 */
enum class MellumCardType(
    val backgroundBrush: Brush,
    val hoverColor: Color,
    val backgroundColor: Color,
    val borderColor: Color,
    val contentColor: Color
) {
    Light(
        backgroundBrush = Brush.linearGradient(
            colors = listOf(
                Color(0xFFFFFFFF),  // Á∫ØÁôΩËâ≤
                Color(0xFFF8FAFC),  // ÊµÖÁÅ∞Ëâ≤
                Color(0xFFE2E8F0)   // ‰∏≠ÁÅ∞Ëâ≤
            )
        ),
        hoverColor = Color(0xFF3B82F6),
        backgroundColor = Color(0xFFFFFFFF),
        borderColor = Color(0xFFE2E8F0),
        contentColor = Color(0xFF1E293B)  // Ê∑±Ëâ≤ÊñáÂ≠óÔºåÁ°Æ‰øùÂØπÊØîÂ∫¶
    ),
    Purple(
        backgroundBrush = Brush.linearGradient(
            colors = listOf(
                Color(0xFF2D1B69),
                Color(0xFF1A0E3D),
                Color(0xFF0F0A1F)
            )
        ),
        hoverColor = Color(0xFF00D4FF),  // ÈùíËâ≤ËçßÂÖâ
        backgroundColor = Color(0xFF2D1B69),
        borderColor = Color(0xFF6B73FF),
        contentColor = Color(0xFFFFFFFF)
    ),
    Blue(
        backgroundBrush = Brush.linearGradient(
            colors = listOf(
                Color(0xFF1E3A8A),
                Color(0xFF1E293B),
                Color(0xFF0F172A)
            )
        ),
        hoverColor = Color(0xFF00FFFF),  // ‰∫ÆÈùíËâ≤ËçßÂÖâ
        backgroundColor = Color(0xFF1E3A8A),
        borderColor = Color(0xFF3B82F6),
        contentColor = Color(0xFFFFFFFF)
    ),
    Teal(
        backgroundBrush = Brush.linearGradient(
            colors = listOf(
                Color(0xFF134E4A),
                Color(0xFF1F2937),
                Color(0xFF111827)
            )
        ),
        hoverColor = Color(0xFF00FF88),  // ËçßÂÖâÁªøËâ≤
        backgroundColor = Color(0xFF134E4A),
        borderColor = Color(0xFF14B8A6),
        contentColor = Color(0xFFFFFFFF)
    ),
    Orange(
        backgroundBrush = Brush.linearGradient(
            colors = listOf(
                Color(0xFF9A3412),
                Color(0xFF7C2D12),
                Color(0xFF431407)
            )
        ),
        hoverColor = Color(0xFFFF6600),  // ËçßÂÖâÊ©ôËâ≤
        backgroundColor = Color(0xFF9A3412),
        borderColor = Color(0xFFF97316),
        contentColor = Color(0xFFFFFFFF)
    ),
    Dark(
        backgroundBrush = Brush.linearGradient(
            colors = listOf(
                Color(0xFF374151),
                Color(0xFF1F2937),
                Color(0xFF111827)
            )
        ),
        hoverColor = Color(0xFFFFFFFF),  // ÁôΩËâ≤ËçßÂÖâ
        backgroundColor = Color(0xFF374151),
        borderColor = Color(0xFF6B7280),
        contentColor = Color(0xFFFFFFFF)
    ),
    Rainbow(
        backgroundBrush = Brush.linearGradient(
            colors = listOf(
                Color(0xFF8B5CF6),
                Color(0xFF3B82F6),
                Color(0xFF10B981),
                Color(0xFF1F2937)
            )
        ),
        hoverColor = Color(0xFFFF00FF),  // ËçßÂÖâÁ¥´Á∫¢Ëâ≤
        backgroundColor = Color(0xFF8B5CF6),
        borderColor = Color(0xFF8B5CF6),
        contentColor = Color(0xFFFFFFFF)
    )
}

/**
 * üé® È¢ÑËÆæÁöÑJetBrainsÈ£éÊ†ºÂç°ÁâáÁªÑ‰ª∂
 * 
 * Êèê‰æõ‰∏Ä‰∫õÂ∏∏Áî®ÁöÑÈ¢ÑËÆæÊ†∑ÂºèÔºåÊñπ‰æøÂø´ÈÄü‰ΩøÁî®
 */
object JetBrainsMellumCards {
    
    /**
     * Koog AgentÈ£éÊ†ºÂç°Áâá
     */
    @Composable
    fun KoogAgentCard(
        onClick: (() -> Unit)? = null,
        modifier: Modifier = Modifier,
        content: @Composable () -> Unit
    ) {
        AddJetBrainsMellumCard(
            onClick = onClick,
            modifier = modifier,
            backgroundType = MellumCardType.Purple,
            content = content
        )
    }
    
    /**
     * HackathonÈ£éÊ†ºÂç°Áâá
     */
    @Composable
    fun HackathonCard(
        onClick: (() -> Unit)? = null,
        modifier: Modifier = Modifier,
        content: @Composable () -> Unit
    ) {
        AddJetBrainsMellumCard(
            onClick = onClick,
            modifier = modifier,
            backgroundType = MellumCardType.Blue,
            content = content
        )
    }
    
    /**
     * Deploy MellumÈ£éÊ†ºÂç°Áâá
     */
    @Composable
    fun DeployMellumCard(
        onClick: (() -> Unit)? = null,
        modifier: Modifier = Modifier,
        content: @Composable () -> Unit
    ) {
        AddJetBrainsMellumCard(
            onClick = onClick,
            modifier = modifier,
            backgroundType = MellumCardType.Teal,
            content = content
        )
    }
}
